name: Go Build and Release

on:
  push:
    tags:
      - "v*" # 触发版本标签（如 v1.0.0）发布时的工作流
  pull_request:
    branches:
      - main # 或者你想触发的分支
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # 通过 matrix 实现多平台构建
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21" # 使用你项目中所需的 Go 版本

      # 设置 GitHub Token 以便进行发布操作
      - name: Set up GitHub token
        run: echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      # 设置环境变量
      - name: Set GOOS and GOARCH
        run: echo "GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV

      # 构建 Go 二进制文件
      - name: Build Go binary
        run: |
          go build -o myapp-${{ matrix.goos }}-${{ matrix.goarch }} .

      # 上传构建的二进制文件为 Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: go-binaries
          path: |
            myapp-linux-amd64
            myapp-linux-arm64
            myapp-darwin-amd64
            myapp-darwin-arm64
            myapp-windows-amd64.exe
            myapp-windows-arm64.exe

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 获取之前的 Artifacts 文件
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: go-binaries

      # 发布到 GitHub Release
      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            myapp-linux-amd64
            myapp-linux-arm64
            myapp-darwin-amd64
            myapp-darwin-arm64
            myapp-windows-amd64.exe
            myapp-windows-arm64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
